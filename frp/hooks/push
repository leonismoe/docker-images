#!/bin/bash

set -xe

. $PWD/.env.local

export DOCKER_CLI_EXPERIMENTAL=enabled

ARCH_ALL='386 amd64 arm arm64 mips mipsle mips64 mips64le'
MANIFESTS=''

# push images for each architectures
for arch in $ARCH_ALL; do
  docker push $DOCKER_REPO:$arch-v$VERSION

  # update `$ARCH-latest`
  if [ "$VERSION" = "$LATEST_VERSION" ]; then
    docker tag $DOCKER_REPO:$arch-v$VERSION $DOCKER_REPO:$arch-latest
    docker push $DOCKER_REPO:$arch-latest
  fi

  # create manifest list cache
  # `docker manifest` does not support `linux/mips` and `linux/mipsle`
  # see https://github.com/docker/cli/blob/88c6089300a82d3373892adf6845a4fed1a4ba8d/cli/command/manifest/util.go#L22
  if [ "$arch" != "mips" ] && [ "$arch" != "mipsle" ]; then
    MANIFESTS="$MANIFESTS $DOCKER_REPO:$arch-v$VERSION"
  fi
done


# create manifest for current version
docker manifest create $DOCKER_REPO:v$VERSION $MANIFESTS
for manifest in $MANIFESTS; do
  arch=$(echo $manifest | grep -oP '(?<=:)(386|amd64|arm|arm64|mips|mipsle|mips64|mips64le)(?=-)')
  docker manifest annotate $DOCKER_REPO:v$VERSION $manifest --os linux --arch $arch
done
docker manifest push $DOCKER_REPO:v$VERSION

if docker manifest --help | grep -q '\brm\b'; then
  docker manifest rm $DOCKER_REPO:v$VERSION
fi


# update `latest` if needed
if [ "$VERSION" = "$LATEST_VERSION" ]; then
  docker manifest create $DOCKER_REPO:latest $MANIFESTS
  for manifest in $MANIFESTS; do
    arch=$(echo $manifest | grep -oP '(?<=:)(386|amd64|arm|arm64|mips|mipsle|mips64|mips64le)(?=-)')
    docker manifest annotate $DOCKER_REPO:latest $manifest --os linux --arch $arch
  done
  docker manifest push $DOCKER_REPO:latest

  if docker manifest --help | grep -q '\brm\b'; then
    docker manifest rm $DOCKER_REPO:latest
  fi
fi


# cleanup
docker rmi $DOCKER_REPO:build-temp || true

for arch in $ARCH_ALL; do
  docker rmi $DOCKER_REPO:$arch-v$VERSION > /dev/null

  if [ "$VERSION" = "$LATEST_VERSION" ]; then
    docker rmi $DOCKER_REPO:$arch-latest > /dev/null
  fi
done
