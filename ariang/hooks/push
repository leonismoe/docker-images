#!/bin/bash

set -xe

. $PWD/.env.local

export DOCKER_CLI_EXPERIMENTAL=enabled

MANIFESTS=''

ARCH_ALL=$(cat <<EOT
linux/386
linux/amd64
linux/arm
linux/arm/v5
linux/arm/v6
linux/arm/v7
linux/arm64
linux/ppc64le
linux/mips
linux/mipsle
linux/mips64
linux/mips64le
linux/riscv64
linux/s390x
EOT
)

# `docker manifest` does not support `linux/mips` and `linux/mipsle`
# see https://github.com/docker/cli/blob/88c6089300a82d3373892adf6845a4fed1a4ba8d/cli/command/manifest/util.go#L22
manifest_supports() {
  local arch=$1
  if [ "$arch" = "mips" ]; then return 1; fi
  if [ "$arch" = "mipsle" ]; then return 1; fi

  # `linux/riscv64` is also unsupported before docker v20.10.0
  # see https://github.com/docker/cli/commit/41aa20b6b5fb68fa5da7bf5a7a6eb6c37cbd45bc
  local cliver=$(docker version -f '{{.Client.Version}}')
  if [ "$arch" = "riscv64" ] && [ "$cliver" = $(echo -e "$cliver\n20.10.0" | sort -V | head -n1) ]; then
    return 1
  fi

  return 0
}

for line in $ARCH_ALL; do
  arch=$(echo $line | cut -d/ -f2)
  variant=$(echo $line | cut -d/ -f3)

  docker push $DOCKER_REPO:${arch}${variant}-$VERSION

  # update `$ARCH-latest`
  if [ "$VERSION" = "$LATEST_VERSION" ]; then
    docker tag $DOCKER_REPO:${arch}${variant}-$VERSION $DOCKER_REPO:${arch}${variant}-latest
    docker push $DOCKER_REPO:${arch}${variant}-latest
    docker rmi $DOCKER_REPO:${arch}${variant}-latest > /dev/null
  fi

  # create manifest list cache
  # `docker manifest` does not support `linux/mips` and `linux/mipsle`
  # see https://github.com/docker/cli/blob/88c6089300a82d3373892adf6845a4fed1a4ba8d/cli/command/manifest/util.go#L22
  if manifest_supports $arch; then
    MANIFESTS="$MANIFESTS $DOCKER_REPO:${arch}${variant}-$VERSION"
  fi
done


# create manifest for current version
docker manifest create $DOCKER_REPO:$VERSION $MANIFESTS

for line in $ARCH_ALL; do
  os=$(echo $line | cut -d/ -f1)
  arch=$(echo $line | cut -d/ -f2)
  variant=$(echo $line | cut -d/ -f3)

  if manifest_supports $arch; then
    extra_opts="--os $os --arch $arch"
    if [ ! -z "$variant" ]; then
      extra_opts="$extra_opts --variant $variant"
    fi
    docker manifest annotate $DOCKER_REPO:$VERSION $DOCKER_REPO:${arch}${variant}-$VERSION $extra_opts
  fi
done

docker manifest push $DOCKER_REPO:$VERSION

if docker manifest --help | grep -q '\brm\b'; then
  docker manifest rm $DOCKER_REPO:$VERSION
fi


# update `latest` if needed
if [ "$VERSION" = "$LATEST_VERSION" ]; then
  docker manifest create $DOCKER_REPO:latest $MANIFESTS

  for line in $ARCH_ALL; do
    os=$(echo $line | cut -d/ -f1)
    arch=$(echo $line | cut -d/ -f2)
    variant=$(echo $line | cut -d/ -f3)

    if manifest_supports $arch; then
      extra_opts="--os $os --arch $arch"
      if [ ! -z "$variant" ]; then
        extra_opts="$extra_opts --variant $variant"
      fi
      docker manifest annotate $DOCKER_REPO:latest $DOCKER_REPO:${arch}${variant}-$VERSION $extra_opts
    fi
  done

  docker manifest push $DOCKER_REPO:latest

  if docker manifest --help | grep -q '\brm\b'; then
    docker manifest rm $DOCKER_REPO:latest
  fi
fi

# cleanup
for line in $ARCH_ALL; do
  arch=$(echo $line | cut -d/ -f2)
  variant=$(echo $line | cut -d/ -f3)

  docker rmi $DOCKER_REPO:${arch}${variant}-$VERSION
done
